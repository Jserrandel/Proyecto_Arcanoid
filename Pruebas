import pygame  # Importa la librería pygame para crear el juego
from random import randint  # Importa randint para generar números aleatorios
import time  # Importa time para manejar tiempos de espera

pygame.init()  # Inicializa todos los módulos de pygame
pygame.mixer.init()  # Inicializa el módulo de sonido de pygame

# Cargar el sonido de fondo
pygame.mixer.music.load("Sonido.mp3")  # Carga el archivo de sonido de fondo
pygame.mixer.music.set_volume(0.5)  # Ajusta el volumen del sonido de fondo
pygame.mixer.music.play(-1)  # Reproduce el sonido en bucle infinito

ventana = pygame.display.set_mode((800, 600))  # Crea una ventana de 800x600 píxeles
pygame.display.set_caption("Arkanoid")  # Establece el título de la ventana

# Cargar imágenes
ball = pygame.image.load("Ball.png")  # Carga la imagen de la pelota
ballrect = ball.get_rect()  # Obtiene el rectángulo que representa la posición de la pelota

# Cargar imágenes de la barra
barra_normal = pygame.image.load("barra.png")  # Carga la imagen de la barra normal
barra_grande = pygame.image.load("barra_grande.png")  # Carga la imagen de la barra grande
barra_pequena = pygame.image.load("barra_pequena.png")  # Carga la imagen de la barra pequeña

barrarect = barra_normal.get_rect()  # Obtiene el rectángulo de la barra normal
barrarect.move_ip(360, 550)  # Posiciona la barra en la parte inferior de la ventana
barra = barra_normal  # Inicializa la barra con la imagen normal

# Cargar imagen de fondo
fondo = pygame.image.load("fondo 2.png")  # Carga la imagen de fondo del juego

# Diccionario de imágenes de ladrillos
imagenes_ladrillos = {
    "azul": pygame.image.load("Ladrillo azul.png"),  # Carga el ladrillo azul
    "rosa": pygame.image.load("Ladrillo rosa.png"),  # Carga el ladrillo rosa
    "verde": pygame.image.load("Ladrillo Verde.png"),  # Carga el ladrillo verde
    "rojo": pygame.image.load("Ladrillo rojo.png"),  # Carga el ladrillo rojo
    "amarillo": pygame.image.load("Ladrillo amarillo.png"),  # Carga el ladrillo amarillo
    "morado": pygame.image.load("Ladrillo morado.png")  # Carga el ladrillo morado
}

# Cargar iconos de efectos
icono_rosa = pygame.image.load("Icono_grande.png")  # Carga el icono de efecto agrandar
icono_azul = pygame.image.load("Icono_pequeno.png")  # Carga el icono de efecto reducir

# Variables del juego
vidas = 3  # Número de vidas del jugador
jugando = False  # Estado del juego (si está en curso o no)
speed = [0, 0]  # Velocidad inicial de la pelota (no se mueve al inicio)
puntuacion = 0  # Puntuación del jugador
nivel = 1  # Nivel actual del juego
barra_agrandada = False  # Indica si la barra está agrandada
pelota_iniciada = False  # Indica si la pelota ha comenzado a moverse

# Clases de ladrillos
efectos = []  # Lista para almacenar los efectos activos
ladrillos = []  # Lista para almacenar los ladrillos del nivel

class Ladrillo:
    def __init__(self, x, y, color):
        self.rect = pygame.Rect(x, y, 60, 25)  # Define el rectángulo del ladrillo
        self.imagen = imagenes_ladrillos[color]  # Asigna la imagen según el color
        self.color = color  # Almacena el color del ladrillo
    
    def dibujar(self, ventana):
        ventana.blit(self.imagen, self.rect)  # Dibuja el ladrillo en la ventana
    
    def colisionar(self):
        pass  # Método para manejar colisiones (se redefine en subclases)

class LadrilloVerde(Ladrillo):
    def __init__(self, x, y):
        super().__init__(x, y, "verde")  # Llama al constructor de la clase base
        self.vida = 3  # Establece la vida del ladrillo verde (3 golpes)
    
    def colisionar(self):
        self.vida -= 1  # Reduce la vida del ladrillo
        if self.vida == 0:
            return True  # Retorna True si el ladrillo se rompe
        return False

class LadrilloRojo(Ladrillo):
    def __init__(self, x, y):
        super().__init__(x, y, "rojo")  # Llama al constructor de la clase base
    
    def colisionar(self):
        return False  # Retorna False (ladrillo irrompible)

class LadrilloNormal(Ladrillo):
    def __init__(self, x, y, color):
        super().__init__(x, y, color)  # Llama al constructor de la clase base
    
    def colisionar(self):
        if self.color == "rosa":
            return True  # Retorna True si es un ladrillo rosa (aplica efecto)
        return True  # Retorna True (ladrillo normal se rompe)

# Clases de efectos
class Efecto:
    def __init__(self, imagen, x, y):
        self.imagen = imagen  # Asigna la imagen del efecto
        self.rect = imagen.get_rect()  # Obtiene el rectángulo de la imagen
        self.rect.topleft = (x, y)  # Posiciona el efecto en la pantalla
        self.speed = 2  # Velocidad de caída del efecto
    
    def mover(self):
        self.rect.y += self.speed  # Mueve el efecto hacia abajo
    
    def dibujar(self, ventana):
        ventana.blit(self.imagen, self.rect)  # Dibuja el efecto en la ventana

class EfectoAgrandar(Efecto):
    def aplicar(self, barrarect):
        global barra_agrandada, barra
        if not barra_agrandada:  # Si la barra no está agrandada
            barrarect.inflate_ip(20, 0)  # Aumenta el tamaño de la barra
            barra = barra_grande  # Cambia la imagen de la barra
            barra_agrandada = True  # Marca la barra como agrandada

class EfectoReducir(Efecto):
    def aplicar(self, barrarect):
        global barra_agrandada, barra
        if barra_agrandada:  # Si la barra está agrandada
            barrarect.inflate_ip(-20, 0)  # Reduce la barra a su tamaño normal
            barra = barra_normal  # Cambia la imagen de la barra
            barra_agrandada = False  # Marca la barra como no agrandada
        else:  # Si la barra está en su tamaño normal
            barrarect.inflate_ip(-20, 0)  # Reduce aún más el tamaño de la barra
            barra = barra_pequena  # Cambia la imagen de la barra

# Funciones para crear niveles
def crear_nivel_1():
    ladrillos = []
    posiciones = [
        (100, 50), (200, 50), (300, 50), (400, 50), (500, 50), (600, 50),
        (150, 100), (250, 100), (350, 100), (450, 100), (550, 100),
        (100, 150), (200, 150), (300, 150), (400, 150), (500, 150), (600, 150)
    ]
    colores = ["azul", "rosa", "verde", "rojo", "amarillo", "morado"]
    for x, y in posiciones:
        color = colores[(x // 100) % len(colores)]  # Asigna colores en un patrón fijo
        if color == "verde":
            ladrillos.append(LadrilloVerde(x, y))  # Crea un ladrillo verde
        elif color == "rojo":
            ladrillos.append(LadrilloRojo(x, y))  # Crea un ladrillo rojo
        else:
            ladrillos.append(LadrilloNormal(x, y, color))  # Crea un ladrillo normal
    return ladrillos

def crear_nivel_2():
    ladrillos = []
    # Definir la forma de "X"
    posiciones = []
    for i in range(7):
        posiciones.append((100 + i * 100, 50 + i * 50))  # Diagonal principal
        posiciones.append((600 - i * 100, 50 + i * 50))  # Diagonal secundaria
    
    colores = ["azul", "rosa", "verde", "rojo", "amarillo", "morado"]
    for x, y in posiciones:
        color = colores[(x // 100) % len(colores)]  # Asigna colores en un patrón fijo
        if color == "verde":
            ladrillos.append(LadrilloVerde(x, y))  # Crea un ladrillo verde
        elif color == "rojo":
            ladrillos.append(LadrilloRojo(x, y))  # Crea un ladrillo rojo
        else:
            ladrillos.append(LadrilloNormal(x, y, color))  # Crea un ladrillo normal
    return ladrillos

def crear_nivel_3():
    ladrillos = []
    # Definir la forma de círculo
    centro_x, centro_y = 400, 200  # Centro del círculo
    radio = 150  # Radio del círculo
    angulo = 0  # Ángulo inicial
    posiciones = []
    while angulo < 360:
        x = centro_x + radio * pygame.math.Vector2(1, 0).rotate(angulo).x  # Calcula la posición x
        y = centro_y + radio * pygame.math.Vector2(1, 0).rotate(angulo).y  # Calcula la posición y
        posiciones.append((int(x), int(y)))  # Añade la posición a la lista
        angulo += 30  # Incrementa el ángulo
    
    colores = ["azul", "rosa", "verde", "rojo", "amarillo", "morado"]
    for i, (x, y) in enumerate(posiciones):
        color = colores[i % len(colores)]  # Asigna colores cíclicamente
        if color == "verde":
            ladrillos.append(LadrilloVerde(x, y))  # Crea un ladrillo verde
        elif color == "rojo":
            ladrillos.append(LadrilloRojo(x, y))  # Crea un ladrillo rojo
        else:
            ladrillos.append(LadrilloNormal(x, y, color))  # Crea un ladrillo normal
    return ladrillos

def crear_nivel_4():
    ladrillos = []
    # Definir la forma de estrella
    posiciones = [
        (400, 50), (300, 150), (500, 150),  # Puntas superiores
        (250, 250), (550, 250),  # Puntas laterales
        (400, 350),  # Punta inferior
        (350, 200), (450, 200)  # Puntas internas
    ]
    
    colores = ["azul", "rosa", "verde", "rojo", "amarillo", "morado"]
    for i, (x, y) in enumerate(posiciones):
        color = colores[i % len(colores)]  # Asigna colores cíclicamente
        if color == "verde":
            ladrillos.append(LadrilloVerde(x, y))  # Crea un ladrillo verde
        elif color == "rojo":
            ladrillos.append(LadrilloRojo(x, y))  # Crea un ladrillo rojo
        else:
            ladrillos.append(LadrilloNormal(x, y, color))  # Crea un ladrillo normal
    return ladrillos

def crear_nivel_5():
    ladrillos = []
    # Definir la forma de corazón
    posiciones = [
        (350, 100), (450, 100),  # Parte superior del corazón
        (300, 150), (400, 150), (500, 150),  # Parte media
        (250, 200), (350, 200), (450, 200), (550, 200),  # Parte inferior
        (300, 250), (400, 250), (500, 250),  # Base del corazón
        (350, 300), (450, 300)  # Punta del corazón
    ]
    
    colores = ["azul", "rosa", "verde", "rojo", "amarillo", "morado"]
    for i, (x, y) in enumerate(posiciones):
        color = colores[i % len(colores)]  # Asigna colores cíclicamente
        if color == "verde":
            ladrillos.append(LadrilloVerde(x, y))  # Crea un ladrillo verde
        elif color == "rojo":
            ladrillos.append(LadrilloRojo(x, y))  # Crea un ladrillo rojo
        else:
            ladrillos.append(LadrilloNormal(x, y, color))  # Crea un ladrillo normal
    return ladrillos

# Crear ladrillos según el nivel
def crear_ladrillos(nivel):
    if nivel == 1:
        return crear_nivel_1()  # Crea el nivel 1
    elif nivel == 2:
        return crear_nivel_2()  # Crea el nivel 2
    elif nivel == 3:
        return crear_nivel_3()  # Crea el nivel 3
    elif nivel == 4:
        return crear_nivel_4()  # Crea el nivel 4
    elif nivel == 5:
        return crear_nivel_5()  # Crea el nivel 5
    return []  # Retorna una lista vacía si no hay nivel

# Función para mostrar la pantalla de carga entre niveles
def mostrar_pantalla_carga(nivel, ultimo_nivel=False):
    ventana.fill((0, 0, 128))  # Rellena la ventana con color azul marino
    if ultimo_nivel:
        texto = pygame.font.Font(None, 50).render("You Win!", True, (255, 255, 255))  # Mensaje de victoria
    else:
        texto = pygame.font.Font(None, 50).render(f"You Pass! Level {nivel}", True, (255, 255, 255))  # Mensaje de nivel completado
    ventana.blit(texto, (300, 250))  # Dibuja el texto en la ventana
    pygame.display.flip()  # Actualiza la pantalla
    time.sleep(3)  # Espera 3 segundos

# Función para verificar si solo quedan ladrillos rojos
def solo_ladrillos_rojos(ladrillos):
    for ladrillo in ladrillos:
        if not isinstance(ladrillo, LadrilloRojo):  # Si no es un ladrillo rojo
            return False  # Retorna False
    return True  # Retorna True si solo quedan ladrillos rojos

# Pantalla de inicio
esperando_click = True
while esperando_click:
    ventana.blit(fondo, (0, 0))  # Dibuja el fondo en la ventana
    texto = pygame.font.Font(None, 36).render("Haz click para empezar", True, (255, 255, 255))  # Mensaje de inicio
    ventana.blit(texto, (300, 250))  # Dibuja el texto en la ventana
    pygame.display.flip()  # Actualiza la pantalla
    for event in pygame.event.get():
        if event.type == pygame.QUIT:  # Si el usuario cierra la ventana
            pygame.quit()  # Cierra pygame
            exit()  # Termina el programa
        if event.type == pygame.MOUSEBUTTONDOWN:  # Si el usuario hace clic
            esperando_click = False  # Sale del bucle de espera
            jugando = True  # Inicia el juego
            ballrect.midbottom = barrarect.midtop  # Coloca la pelota encima de la barra
            ladrillos = crear_ladrillos(nivel)  # Crea los ladrillos del nivel inicial

# Bucle principal
ejecutando = True
clock = pygame.time.Clock()  # Crea un reloj para controlar la velocidad del juego
while ejecutando:
    ventana.blit(fondo, (0, 0))  # Dibuja el fondo en la ventana
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:  # Si el usuario cierra la ventana
            ejecutando = False  # Termina el bucle principal

    if jugando:
        keys = pygame.key.get_pressed()  # Obtiene las teclas presionadas
        if keys[pygame.K_LEFT] and barrarect.left > 0:  # Si se presiona la flecha izquierda y la barra no sale de la pantalla
            barrarect.move_ip(-5, 0)  # Mueve la barra a la izquierda
        if keys[pygame.K_RIGHT] and barrarect.right < 800:  # Si se presiona la flecha derecha y la barra no sale de la pantalla
            barrarect.move_ip(5, 0)  # Mueve la barra a la derecha

        # Iniciar el movimiento de la pelota cuando se presiona una flecha
        if not pelota_iniciada: 
            if keys[pygame.K_LEFT] or keys[pygame.K_RIGHT]:  # Si se presiona una flecha
                speed = [randint(3, 6), randint(3, 6)]  # Asigna una velocidad aleatoria a la pelota
                pelota_iniciada = True  # Marca la pelota como iniciada

        if pelota_iniciada:
            ballrect.x += speed[0]  # Mueve la pelota en el eje X
            ballrect.y += speed[1]  # Mueve la pelota en el eje Y
            if ballrect.left <= 0 or ballrect.right >= 800:  # Si la pelota choca con los bordes laterales
                speed[0] = -speed[0]  # Invierte la dirección en el eje X
            if ballrect.top <= 0:  # Si la pelota choca con el borde superior
                speed[1] = -speed[1]  # Invierte la dirección en el eje Y
            if ballrect.bottom >= 600:  # Si la pelota choca con el borde inferior
                vidas -= 1  # Reduce una vida
                ballrect.midbottom = barrarect.midtop  # Coloca la pelota encima de la barra
                pelota_iniciada = False  # Detiene la pelota hasta que se presione una flecha
                if vidas == 0:  # Si no quedan vidas
                    jugando = False  # Termina el juego

            if ballrect.colliderect(barrarect):  # Si la pelota choca con la barra
                speed[1] = -speed[1]  # Invierte la dirección en el eje Y

            for ladrillo in ladrillos[:]:  # Itera sobre una copia de la lista de ladrillos
                if ballrect.colliderect(ladrillo.rect):  # Si la pelota choca con un ladrillo
                    if isinstance(ladrillo, LadrilloVerde):  # Si es un ladrillo verde
                        if ladrillo.colisionar():  # Si el ladrillo se rompe
                            ladrillos.remove(ladrillo)  # Elimina el ladrillo
                            puntuacion += 10  # Aumenta la puntuación
                    elif isinstance(ladrillo, LadrilloRojo):  # Si es un ladrillo rojo
                        pass  # No hace nada (ladrillo irrompible)
                    else:  # Si es un ladrillo normal
                        if ladrillo.colisionar():  # Si el ladrillo se rompe
                            ladrillos.remove(ladrillo)  # Elimina el ladrillo
                            puntuacion += 10  # Aumenta la puntuación
                            if ladrillo.color == "rosa":  # Si el ladrillo es rosa
                                efectos.append(EfectoAgrandar(icono_rosa, ladrillo.rect.x, ladrillo.rect.y))  # Añade efecto agrandar
                            elif ladrillo.color == "azul":  # Si el ladrillo es azul
                                efectos.append(EfectoReducir(icono_azul, ladrillo.rect.x, ladrillo.rect.y))  # Añade efecto reducir
                    # Ajusta la posición de la pelota para evitar colisiones múltiples
                    if speed[1] > 0:  # Si la pelota va hacia abajo
                        ballrect.bottom = ladrillo.rect.top  # Coloca la pelota encima del ladrillo
                    else:  # Si la pelota va hacia arriba
                        ballrect.top = ladrillo.rect.bottom  # Coloca la pelota debajo del ladrillo
                    speed[1] = -speed[1]  # Invierte la dirección en el eje Y

            for efecto in efectos[:]:  # Itera sobre una copia de la lista de efectos
                efecto.mover()  # Mueve el efecto hacia abajo
                efecto.dibujar(ventana)  # Dibuja el efecto en la ventana
                if barrarect.colliderect(efecto.rect):  # Si la barra choca con el efecto
                    efecto.aplicar(barrarect)  # Aplica el efecto a la barra
                    efectos.remove(efecto)  # Elimina el efecto

            # Verificar si solo quedan ladrillos rojos en el nivel actual
            if solo_ladrillos_rojos(ladrillos):  # Si solo quedan ladrillos rojos
                if nivel == 5:  # Si es el último nivel
                    mostrar_pantalla_carga(nivel, ultimo_nivel=True)  # Muestra la pantalla de victoria
                    ejecutando = False  # Termina el juego
                else:  # Si no es el último nivel
                    mostrar_pantalla_carga(nivel)  # Muestra la pantalla de carga
                    nivel += 1  # Pasa al siguiente nivel
                    speed[0] *= 1.1  # Aumenta la velocidad de la pelota en el eje X
                    speed[1] *= 1.1  # Aumenta la velocidad de la pelota en el eje Y
                    ladrillos = crear_ladrillos(nivel)  # Crea los ladrillos del nuevo nivel
                    ballrect.midbottom = barrarect.midtop  # Coloca la pelota encima de la barra
                    barra = barra_normal  # Restablece la barra a su tamaño normal
                    barra_agrandada = False  # Restablece el estado de la barra
                    pelota_iniciada = False  # Detiene la pelota hasta que se presione una flecha

    ventana.blit(ball, ballrect)  # Dibuja la pelota en la ventana
    ventana.blit(barra, barrarect)  # Dibuja la barra en la ventana
    for ladrillo in ladrillos:  # Itera sobre los ladrillos
        ladrillo.dibujar(ventana)  # Dibuja cada ladrillo en la ventana
    for efecto in efectos:  # Itera sobre los efectos
        efecto.mover()  # Mueve cada efecto
        efecto.dibujar(ventana)  # Dibuja cada efecto en la ventana
    vidas_texto = pygame.font.Font(None, 36).render(f"Vidas: {vidas}", True, (255, 255, 255))  # Crea el texto de vidas
    ventana.blit(vidas_texto, (10, 10))  # Dibuja el texto de vidas en la ventana
    puntuacion_texto = pygame.font.Font(None, 36).render(f"Puntuación: {puntuacion}", True, (255, 255, 255))  # Crea el texto de puntuación
    ventana.blit(puntuacion_texto, (650, 10))  # Dibuja el texto de puntuación en la ventana
    nivel_texto = pygame.font.Font(None, 36).render(f"Nivel: {nivel}", True, (255, 255, 255))  # Crea el texto de nivel
    ventana.blit(nivel_texto, (350, 10))  # Dibuja el texto de nivel en la ventana
    if not jugando and vidas == 0:  # Si el juego ha terminado y no quedan vidas
        texto_game_over = pygame.font.Font(None, 50).render("Game Over", True, (255, 0, 0))  # Crea el texto de Game Over
        ventana.blit(texto_game_over, (300, 250))  # Dibuja el texto de Game Over en la ventana
        texto_reiniciar = pygame.font.Font(None, 36).render("Presiona R para reiniciar", True, (255, 255, 255))  # Crea el texto de reinicio
        ventana.blit(texto_reiniciar, (280, 300))  # Dibuja el texto de reinicio en la ventana
        keys = pygame.key.get_pressed()  # Obtiene las teclas presionadas
        if keys[pygame.K_r]:  # Si se presiona la tecla R
            vidas = 3  # Restablece las vidas
            jugando = True  # Reinicia el juego
            ballrect.midbottom = barrarect.midtop  # Coloca la pelota encima de la barra
            speed = [0, 0]  # Detiene la pelota
            pelota_iniciada = False  # Marca la pelota como no iniciada
            ladrillos = crear_ladrillos(nivel)  # Crea los ladrillos del nivel actual
            efectos = []  # Limpia la lista de efectos
    pygame.display.flip()  # Actualiza la pantalla
    clock.tick(60)  # Limita el juego a 60 FPS

# Detener el sonido cuando el juego termina
pygame.mixer.music.stop()  # Detiene la música de fondo
pygame.quit()  # Cierra pygame